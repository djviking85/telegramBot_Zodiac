package com.telebotZodiac.bot.listener;

import com.pengrad.telegrambot.TelegramBot;
import com.pengrad.telegrambot.UpdatesListener;
import com.pengrad.telegrambot.model.Update;
import com.pengrad.telegrambot.model.request.InlineKeyboardButton;
import com.pengrad.telegrambot.model.request.InlineKeyboardMarkup;
import com.pengrad.telegrambot.request.SendMessage;
import com.telebotZodiac.bot.service.ShelterService;
import com.telebotZodiac.bot.shelter.ShelterGoroskop;
import jakarta.annotation.PostConstruct;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;



@Service

public class TelegramBotUpdatesListener implements UpdatesListener {
    //    –¥–µ–ª–∞–µ–º —Å—Ç–∞—Ç–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –æ –∫–ª–∞—Å—Å–∏–∫–µ
    private static final String GOROSKOP_CLASSIC_BUTTON = "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø ‚ôà‚ôâ‚ôä‚ôã‚ôå‚ôç‚ôé";
    private static final String CALLBACK_SHOW_INFO_CLASSIC = "SHOW_INFO_CLASSIC";
    private static final String CALLBACK_SHOW_DESCRIPTION_CLASSIC = "SHOW_INSTRUCTION_CLASSIC";


//    –¥–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ –∫–∏—Ç–∞–π—Å–∫–æ–º

    private static final String GOROSKOP_CHINA_BUTTON = "–ö–∏—Ç–∞–π—Å–∫–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø üêÄüêÇüêÖüêáüêâüêçüêé";
    private static final String CALLBACK_SHOW_INFO_CHINA = "SHOW_INFO_CHINA";
    private static final String CALLBACK_SHOW_DESCRIPTION_CHINA = "SHOW_INSTRUCTION_CHINA";


    private static final Pattern PATTERN = Pattern.compile("(^[+|8][0-9\\s]+)\\s(\\w*@.+\\D$)");
    // –¥–µ–ª–∞–µ–º –ª–æ–≥–∏ –ø–æ –ª–∏—Å—Ç–µ–Ω–µ—Ä—É
    private Logger logger = LoggerFactory.getLogger(TelegramBotUpdatesListener.class);


    //       @Autowired
    private TelegramBot telegramBot;

    private final ShelterService shelterService;


    public TelegramBotUpdatesListener(TelegramBot telegramBot, ShelterService shelterService) {
        this.telegramBot = telegramBot;
        this.shelterService = shelterService;
    }

    @PostConstruct
    public void init() {
        telegramBot.setUpdatesListener(this);
    }

//    —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–∞, –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞, –ø–∞—Ç—Ç–µ–Ω—Ä –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏


    @Override
    public int process(List<Update> updates) {
        updates.forEach(update -> {
            logger.info("Processing update: {}", update);
            if (update.message() != null && "/start".equals(update.message().text())) {
                startMessage(update);
            } else if (update.callbackQuery() != null) {
                processCallbackQuery(update);

//—Ç–∞–∫ –º—ã –ø–æ–ª—É—á–∞–µ–º –≤–æ–¥–æ–ª–µ—è –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–∏–∏ 01.02 - —Ç–µ —Ä–∞–±–æ—á–∏–π –∫–æ–¥
            } else if (update.message() != null && "01.02".equals(update.message().text())) {
                String messageText = update.message().text();
                String name = update.message().chat().firstName();

                if (update.hasMessage() && update.getMessage().hasText()) {
                    String messageText = update.getMessage().getText();
                    long chatId = update.getMessage().getChatId();

                    if (messageText.matches("[0-3]?[0-9].[0-1]?[0-9]")) {
                        String[] dateParts = messageText.split("\\.");
                        int day = Integer.parseInt(dateParts[0]);
                        int month = Integer.parseInt(dateParts[1]);

                        String zodiacSign = getZodiacSign(day, month);

                        sendMessage(chatId, "–í–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: " + zodiacSign);
                    } else {
                        sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –∏ –º–µ—Å—è—Ü –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–¥–¥.–º–º'");
                    }
                }

                String msg = "–ü—Ä–∏–≤–µ—Ç, " + name;
                long chatId = update.message().chat().id();

                SendMessage sendMessage = new SendMessage(chatId, msg);
                telegramBot.execute(sendMessage);

//                if (update.hasMessage() && update.getMessage().hasText()) {
//                    String messageText = update.getMessage().getText();
//                    long chatId = update.getMessage().getChatId();

                    if (messageText.matches("[0-3]?[0-9].[0-1]?[0-9]")) {
                        String[] dateParts = messageText.split("\\.");
                        int day = Integer.parseInt(dateParts[0]);
                        int month = Integer.parseInt(dateParts[1]);
//
                        String zodiacSign = getZodiacSign(day, month);
//
                      SendMessage sendMessage2 = new SendMessage(chatId, "–í–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: " + zodiacSign);
                        telegramBot.execute(sendMessage2);
                    } else {
                        SendMessage sendMessage3 = new SendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –∏ –º–µ—Å—è—Ü –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–¥–¥.–º–º'");
                        telegramBot.execute(sendMessage3);
                    }


            }
//            else {
//                failedMessage(update.message().chat().id());
//            }
        });
        return UpdatesListener.CONFIRMED_UPDATES_ALL;
    }


    public void startMessage(Update update) {
        String name = update.message().chat().firstName();
        String msg = "–ü—Ä–∏–≤–µ—Ç, " + name + "! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç-–≥–æ—Ä–æ—Å–∫–æ–ø." +
                " –ù–∞–º–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≥–æ—Ä–æ—Å–∫–æ–ø—ã —Ä–∞–∑–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∏ –ö–∏—Ç–∞–π—Å–∫–∏–π" +
                " –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ—Ä–æ—Å–∫–æ–ø–µ,  " +
                "–∞ —Ç–∞–∫ –∂–µ –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å —á—É—Ç—å –±–æ–ª—å—à–µ –æ —Å–µ–±–µ.";

//        updates.forEach(update -> {
//            logger.info("Processing update: {}", update);
//            String msg = update.message().text();
//            if (msg.equals("/start")) {
//                SendMessage message = new SendMessage(
//                        update.message().chat().id(),
//                        String.format("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ %s, –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç-–≥–æ—Ä–æ—Å–∫–æ–ø.  –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.MM.yyyy (–ø—Ä–∏–º–µ—Ä: 12.02.2023) –∏ –≤—ã —É–∑–Ω–∞–µ—Ç–µ, —á—Ç–æ –æ–∂–∏–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞.", update.message().chat().firstName())
//                );
//                logger.info("Start button has been activated ^)");
//                telegramBot.execute(message);
        long id = update.message().chat().id();
//        —Ç—É—Ç –º—ã –ø—Ä–∏–∫—Ä—É—á–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        InlineKeyboardButton[] buttonsRow = {
                new InlineKeyboardButton(GOROSKOP_CLASSIC_BUTTON).callbackData(GOROSKOP_CLASSIC_BUTTON)};
        InlineKeyboardButton[] buttonsRow2 = {
                new InlineKeyboardButton(GOROSKOP_CHINA_BUTTON).callbackData(GOROSKOP_CHINA_BUTTON)};
        InlineKeyboardMarkup inlineKeyboard = new InlineKeyboardMarkup(buttonsRow, buttonsRow2);
        SendMessage sendMessage = new SendMessage(id, msg);
        sendMessage.replyMarkup(inlineKeyboard);
        telegramBot.execute(sendMessage);
    }


    private void processCallbackQuery(Update update) {
        Long chatId = update.callbackQuery().message().chat().id();
//
        if (GOROSKOP_CLASSIC_BUTTON.equalsIgnoreCase(update.callbackQuery().data())) {
            createButtonClassicZodiacShelter(chatId);
        } else if (GOROSKOP_CHINA_BUTTON.equalsIgnoreCase(update.callbackQuery().data())) {
            createButtonChinaZodiacShelter(chatId);
        } else if (CALLBACK_SHOW_DESCRIPTION_CLASSIC.equalsIgnoreCase(update.callbackQuery().data())) {
            sendShelterDescription(chatId, ShelterGoroskop.CLASSIC);
        } else if (CALLBACK_SHOW_DESCRIPTION_CHINA.equalsIgnoreCase(update.callbackQuery().data())) {
            sendShelterDescription(chatId, ShelterGoroskop.CHINA);
        } else if (CALLBACK_SHOW_INFO_CLASSIC.equalsIgnoreCase(update.callbackQuery().data())) {
            sendShelterInstruction(chatId, ShelterGoroskop.CLASSIC);
        } else if (CALLBACK_SHOW_INFO_CHINA.equalsIgnoreCase(update.callbackQuery().data())) {
            sendShelterInstruction(chatId, ShelterGoroskop.CHINA);
//        } else if (CALLBACK_SHOW_INFO_CATS.equalsIgnoreCase(update.callbackQuery().data())) {
//            sendShelterInfo(chatId, ShelterType.CAT);
//        } else if (CALLBACK_SHOW_MENU_REPORT.equalsIgnoreCase(update.callbackQuery().data())) {
//            createButtonsReportMenu(chatId);
//        } else if (CALLBACK_CHOOSE_SEND_REPORT.equalsIgnoreCase(update.callbackQuery().data())) {
//            sendReportMessage(chatId);
//        } else if (CALLBACK_CHOOSE_FORM_REPORT.equalsIgnoreCase(update.callbackQuery().data())) {
//            sendReportForm(chatId);
        }
    }

    //–¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞—Ç—Ç–æ–Ω –∏–Ω—Ñ–æ
    private void createButtonInfoMenu(Long chatId, String dataUser, String dataGoroscop) {
        String msg = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:";
        InlineKeyboardButton[] buttonsRowForDataUser = {
                new InlineKeyboardButton("–í–≤–æ–¥–∏–º —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ - –ø–æ –¥–∞—Ç–µ ‚å® ").callbackData(dataUser)};
        InlineKeyboardButton[] buttonsRowForDataGoroscop = {
                new InlineKeyboardButton(" \uD83D\uDEC8 –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Ä–æ—Å–∫–æ–ø–µ \uD83E\uDDD0").callbackData(dataGoroscop)};

        InlineKeyboardMarkup inlineKeyboard = new InlineKeyboardMarkup(buttonsRowForDataUser, buttonsRowForDataGoroscop);
        SendMessage sendMessage = new SendMessage(chatId, msg);
        sendMessage.replyMarkup(inlineKeyboard);
        telegramBot.execute(sendMessage);

    }

    private void createButtonClassicZodiacShelter(Long chatId) {
        createButtonInfoMenu(chatId, CALLBACK_SHOW_INFO_CLASSIC, CALLBACK_SHOW_DESCRIPTION_CLASSIC);
    }

    private void createButtonChinaZodiacShelter(Long chatId) {
        createButtonInfoMenu(chatId, CALLBACK_SHOW_INFO_CHINA, CALLBACK_SHOW_DESCRIPTION_CHINA);
//    }
    }

    private void sendShelterDescription(Long chatId, ShelterGoroskop type) {
        SendMessage sendMessage = new SendMessage(chatId, shelterService.getDescription(type));
        telegramBot.execute(sendMessage);
    }

    private void sendShelterInstruction(Long chatId, ShelterGoroskop type) {
        SendMessage sendMessage = new SendMessage(chatId, shelterService.getInstruction(type));
        telegramBot.execute(sendMessage);
    }

    private void failedMessage(Long chatId) {
        String msg = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —á—Ç–æ –¥–µ–ª–∞—Ç—å";
        SendMessage sendMessage = new SendMessage(chatId, msg);
        telegramBot.execute(sendMessage);
    }

    private boolean checkMessagePattern(String text) {
        Matcher matcher = PATTERN.matcher(text);
        return matcher.matches();
    }



    private String getZodiacSign(int day, int month) {
        // –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ –∑–¥–µ—Å—å

        // –ü—Ä–∏–º–µ—Ä —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:
        if ((month == 3 && day >= 21) || (month == 4 && day <= 19)) {
            return "–û–≤–µ–Ω";
        } else if ((month == 4 && day >= 20) || (month == 5 && day <= 20)) {
            return "–¢–µ–ª–µ—Ü";
        } else if ((month == 5 && day >= 21) || (month == 6 && day <= 20)) {
            return "–ë–ª–∏–∑–Ω–µ—Ü—ã";
        } else if ((month == 6 && day >= 21) || (month == 7 && day <= 22)) {
            return "–†–∞–∫";
        } else if ((month == 7 && day >= 23) || (month == 8 && day <= 22)) {
            return "–õ–µ–≤";
        } else if ((month == 8 && day >= 23) || (month == 9 && day <= 22)) {
            return "–î–µ–≤–∞";
        } else if ((month == 9 && day >= 23) || (month == 10 && day <= 22)) {
            return "–í–µ—Å—ã";
        } else if ((month == 10 && day >= 23) || (month == 11 && day <= 21)) {
            return "–°–∫–æ—Ä–ø–∏–æ–Ω";
        } else if ((month == 11 && day >= 22) || (month == 12 && day <= 21)) {
            return "–°—Ç—Ä–µ–ª–µ—Ü";
        } else if ((month == 12 && day >= 22) || (month == 1 && day <= 19)) {
            return "–ö–æ–∑–µ—Ä–æ–≥";
        } else if ((month == 1 && day >= 20) || (month == 2 && day <= 18)) {
            return "–í–æ–¥–æ–ª–µ–π";
        } else {
            return "–†—ã–±—ã";
        }
//
    }
}
